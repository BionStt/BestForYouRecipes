<div class="@CssClass" style="@($"--star-rating: {Rating};")">
    @if (!RatingChanged.HasDelegate)
    {
        <span class="stars">☆☆☆☆☆</span>
        <span class="rating">@Math.Round(Rating, 1)</span>
    }
    else
    {
        for (int i = 5; i > 0; i--)
        {
            var id = $"star{i}";
            var value = i;
            <input type="radio" id="@id" name="star-rating" value="@value" checked="@(Rating == value)" @onchange="OnChange" />
            <label for="@id"></label>
        }
    }
</div>

@code {
    FieldIdentifier fieldIdentifier;

    [CascadingParameter]
    EditContext EditContext { get; set; }

    [Parameter]
    public double Rating { get; set; }

    [Parameter]
    public EventCallback<double> RatingChanged { get; set; }

    [Parameter]
    public Expression<Func<double>> For { get; set; }

    string CssClass => $"star-rating {EditContext?.FieldCssClass(fieldIdentifier) ?? ""}";

    Task OnChange(ChangeEventArgs args)
    {
        Rating = double.Parse(args.Value.ToString());
        return RatingChanged.InvokeAsync(Rating);
    }
}
